name: Release

# Configure your build and release platforms
env:
  # If your repo name differs from your binary name, change it.
  # Check you Cargo.toml -> package -> name
  binary: ${{ github.event.repository.name }}

  # Build platforms

  # Valid platforms: "linux, windows, macos_intel, macos_apple_silicon"
  # - Write "intel" and "apple" to abbreviate "macos_intel" and "macos_apple_silicon," respectively.
  # - Write "macos" to build for both "intel" and "apple"
  build_for: "linux,windows,macos"

  # Releases

  # Valid platforms: "github_releases"
  # - For brevity you can write: "releases"
  publish_to: "github_releases"

permissions:
  # To upload files to GitHub Releases
  contents: write
  # To verify the deployment originates from an appropriate source
  id-token: write

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Add tag version: (e.g. -> v3.6.1)"
        required: true
        type: string
      build_for:
        description: "Build for:"
        default: linux,windows,macos
      publish_to:
        description: "Publish to:"
        default: github_releases

jobs:
  # Load variables
  load-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
    outputs:
      run_build_linux: ${{ (inputs.tag && contains(inputs.build_for, 'linux')) || (!inputs.tag && contains(env.build_for, 'linux') ) }}
      run_build_windows: ${{ ( inputs.tag && contains(inputs.build_for, 'windows')) || (!inputs.tag && contains(env.build_for, 'windows') ) }}
      run_build_macos_intel: ${{ ( inputs.tag && ( contains(inputs.build_for, 'intel') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'intel') || contains(env.build_for, 'macos')) ) }}
      run_build_macos_apple_silicon: ${{ ( inputs.tag && ( contains(inputs.build_for, 'apple') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'apple') || contains(env.build_for, 'macos')) ) }}
      run_publish_github_releases: ${{ ( inputs.tag && contains(inputs.publish_to, 'releases')) || (!inputs.tag && contains(env.publish_to, 'releases') ) }}
      tag: ${{ ( inputs.tag || github.ref_name ) }}
      binary: ${{ env.binary }}

  # Build for Linux x86_64
  build-linux:
    needs: load-env
    if: needs.load-env.outputs.run_build_linux == 'true'
    uses: ./.github/workflows/linux.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}

  # Build for Windows x86_64
  build-windows:
    needs: load-env
    if: needs.load-env.outputs.run_build_windows == 'true'
    uses: ./.github/workflows/windows.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}


  # Build for MacOS x86_64/ARM64
  build-macos:
    needs: load-env
    if: needs.load-env.outputs.run_build_macos_intel == 'true' || needs.load-env.outputs.run_build_macos_apple_silicon == 'true'
    uses: ./.github/workflows/macos.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}
      run_macos_intel: ${{ needs.load-env.outputs.run_build_macos_intel }}
      run_macos_apple_silicon: ${{ needs.load-env.outputs.run_build_macos_apple_silicon }}


  # Release binaries in GitHub
  publish-github-releases:
    needs:
      - load-env
      - build-linux
      - build-windows
      - build-macos
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_github_releases == 'true'}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: linux-x86_64
            os: ubuntu-latest
          - artifact_name: windows-x86_64
            os: windows-latest
          - artifact_name: darwin-x86_64
            os: macos-latest
          - artifact_name: darwin-aarch64
            os: macos-latest
    uses: ./.github/workflows/github_releases.yaml
    name: publish / github-releases
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      os: ${{ matrix.os }}
      artifact_name: ${{ matrix.artifact_name }}
    secrets: inherit
